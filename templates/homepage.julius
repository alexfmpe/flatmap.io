mapboxgl.accessToken = #{appMapboxAccessToken};

var map = new mapboxgl.Map({
    container: 'mapid',
    center: [23.0622, 53.3439],
    minZoom: 2,
    zoom: 3,
    style: 'mapbox://styles/mapbox/dark-v10'
});

var markers = #{toJSONList companies}.map(company => {

                return {
                    type: "Feature",
                    properties: {
                        title: company.companyName,
                        website: company.companyWebsite,
                        linkedin: company.companySocials.linkedin,
                        github: company.companySocials.github,
                        industry: company.companyIndustry,
                        isRemote: company.companyRemote
                    },
                    geometry: {
                        type: "Point",
                        coordinates: [
                            company.companyOffice.officeCoordinate.coordinateLon,
                            company.companyOffice.officeCoordinate.coordinateLat
                        ]
                    }
                }

});

map.on("load", function() {
    /* Image: An image is loaded and added to the map. */
    map.loadImage('@{MarkerR}', function(error, image) {
        if (error) throw error;
        map.addImage("custom-marker", image);
        /* Style layer: A style layer ties together the source and image and specifies how they are displayed on the map. */
        map.addLayer({
            id: "locations",
            type: "symbol",
            /* Source: A data source specifies the geographic coordinate where the image marker gets placed. */
            source: {
                type: "geojson",
                data: {
                    type: 'FeatureCollection',
                    features: markers
                }
            },
            layout: {
                "icon-image": "custom-marker",
                "icon-allow-overlap": true
            }
        });

    });
});

function flyToPoint(currentFeature) {
    let nextZoom = Math.max(map.getZoom(), Math.min(10, Math.max(5, map.getZoom() + 0.3)));
  map.flyTo({
    center: currentFeature.geometry.coordinates,
      zoom: nextZoom
  })
}

function createPopUp(currentFeature) {
  var popUps = document.getElementsByClassName('mapboxgl-popup');
  // Check if there is already a popup on the map and if so, remove it
  if (popUps[0]) popUps[0].remove();


  let prop = currentFeature.properties;
  let github = prop.github;
  let linkedin = prop.linkedin;
  let isRemote = prop.isRemote;

  var popup = new mapboxgl.Popup({ closeOnClick: false })
    .setLngLat(currentFeature.geometry.coordinates)
    .setMaxWidth(290)
    .setHTML(
        '<div class="in-window">'
            +'<h4><a href="' + prop.website + '" target="_blank" rel="noopener">' + prop.title + '</a> </h4>'
            + '<div class="separator"></div>'
            + '<div class="company-info">'
            + '<div class="company-links">'
            + ('null' != github ? '<i class="fab fa-github"></i> <a href="https://github.com/' + github + '" target="_blank" rel="noopener">' + github + '</a> </br>' : '')
            + ('null' != linkedin ? '<i class="fab fa-linkedin-in"></i> <a href="https://www.linkedin.com/company/' + linkedin + '/about" target="_blank" rel="noopener">' + linkedin + '</a></br>' : '')
            + '</div>'
            + '<div class="company-type">'
            + (isRemote ? 'remote friendly <i class="fas fa-home"></i>' : '')
            + '</div>'
            + '</div>'
            + '<i class="fas fa-industry"></i> ' + prop.industry
            + '</div>'
            )
    .addTo(map);
}

// Add an event listener for when a user clicks on the map
map.on('click', function(e) {
  // Query all the rendered points in the view
  var features = map.queryRenderedFeatures(e.point, { layers: ['locations'] });
  if (features.length) {
    var clickedPoint = features[0];
    // 1. Fly to the point
    flyToPoint(clickedPoint);
    // 2. Close all other popups and display popup for clicked store
    createPopUp(clickedPoint);
  }
});
